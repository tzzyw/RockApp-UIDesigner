<# Rock.Dyn.Core.DynObject dictForm=Data["dictForm"] as  Rock.Dyn.Core.DynObject;
 string modelType = dictForm["ModelType"] as string;
 string modelTypeName = dictForm["ModelTypeName"] as string;
 string modelObjeName=modelType.Substring(0, 1).ToLower()+ modelType.Substring(1);
 Rock.Dyn.Core.DynObject dataGrid=dictForm["DataGrid"] as  Rock.Dyn.Core.DynObject;
 List<Rock.Dyn.Core.DynObject> gridColumns=dataGrid["GridColumns"] as List<Rock.Dyn.Core.DynObject>;
 List<Rock.Dyn.Core.DynObject> queryItems=dictForm["QueryItems"] as List<Rock.Dyn.Core.DynObject>;
 Rock.Dyn.Core.DynObject queryItemModel = null;
 Rock.Dyn.Core.DynObject gridColumnModel = null;
 Dictionary<string, string> structPopDict = new Dictionary<string, string>();
 Dictionary<string, string> referPopDict = new Dictionary<string, string>();
 Dictionary<string, string> quickPopDict = new Dictionary<string, string>();
 bool hasQueryDate = false;
 bool hasQueryPop = false;
 List<string> dateControlLists = new List<string>();
 List<string> beginDateLists = new List<string>();
 List<string> endDateLists = new List<string>();
 List<string> popDivLists = new List<string>();
 List<string> popQueryItemNameLists = new List<string>();
 string popStr = "";
 int columnTotalWidth = 0;
 string popVar = "";
 string queryType = "";
 string displayName = "";
 string queryItemName = "";
 string inputType = "";
 string referType = "";
 string queryDisplayName ="";
 string gridColumnName = "";
 string structName = "";
 string queryForm = "";
 string sql = "";
 string dataType = "";
 string referClause = "";
 for (var i = 0; i < queryItems.Count; i++)
 {
    queryItemModel = queryItems[i] ;
	queryItemName = queryItemModel["QueryItemName"] as string;
	queryForm = queryItemModel["QueryForm"] as string;
	if(queryForm == "Date")
	{   
		beginDateLists.Add("\"begin" + queryItemName + "\"");
		endDateLists.Add("\"end" + queryItemName + "\"");			
		hasQueryDate = true;
		hasQueryDate = true;		  
	}
	if(queryForm == "Tree")
	{
	    hasQueryPop = true;
	}
 }

  for (var i = 0; i < queryItems.Count; i++)
  {
    queryItemModel = queryItems[i] ;
	queryItemName = queryItemModel["QueryItemName"] as string;
	queryType = queryItemModel["QueryType"] as string;
	inputType = queryItemModel["InputType"] as string;
	structName = queryItemModel["StructName"] as string;
	if(inputType == "TextBox")
	{
        switch (queryType)
        {
            case "Struct":
				structPopDict.Add(queryItemName, structName);
				popQueryItemNameLists.Add(queryItemName);
				popDivLists.Add("<div id=\"" + queryItemName + "Pop\" style=\"width: 168px; height: 400px; position: absolute; background-color: White;display: none;z-index:9\"><div id=\"" + queryItemName + "Tree\" style=\"width: 168px; height: 300px; float: left; border: 1px solid #E3E3E3;\"></div></div>");
		        popVar +=  queryItemName + "Pop, " + queryItemName + "Tree ";
				hasQueryPop = true;
                break;
            case "Refer":
				referPopDict.Add(queryItemName, referType);
				popQueryItemNameLists.Add(queryItemName);
				popDivLists.Add("<div id=\"" + queryItemName + "Pop\" style=\"width: 168px; height: 400px; position: absolute; background-color: White;display: none;z-index:9\"><div id=\"" + queryItemName + "Tree\" style=\"width: 168px; height: 300px; float: left; border: 1px solid #E3E3E3;\"></div></div>");
		        popVar +=  queryItemName + "Pop, " + queryItemName + "Tree ";
				hasQueryPop = true;
                break;
            case "Quick":
				quickPopDict.Add(queryItemName, structName);
				popQueryItemNameLists.Add(queryItemName);
				popDivLists.Add("<div id=\"" + queryItemName + "Pop\" style=\"width: 260px; height: 400px; position: absolute; background-color: White;display: none;z-index:9\"><div id=\"" + queryItemName + "QuickGrid\" style=\"width: 260px; height: 400px; float: left; border: 1px solid #E3E3E3;\"></div></div>");
		        popVar +=  queryItemName + "Pop, " + queryItemName + "QuickGrid ";
				hasQueryPop = true;
                break;
            default:
                break;
        }		
	}
 }
for (var i = 0; i < gridColumns.Count; i++) {
	gridColumnModel = gridColumns[i];
	columnTotalWidth += (int)(gridColumnModel["GridWidth"]);	
}#>
$(function () {
    //初始化系统通用变量
    var toolBar, listGrid, editState, editForm, dictDataList, sqlStr,serverDate,
      <#= modelObjeName #> = null,
	  editItem = $("#editItem"),
      dictDataList = new rock.JsonList();
    window.dhx_globalImgPath = "/resource/dhtmlx/codebase/imgs/";
    //加载动态脚本
    var jsTypes = "ISystemService,DataTable,DataRow,DataColumn,<#= modelType #>";
    $.getScript('/LoadDomainJS.ashx?JsTypes=' + jsTypes, function () {
	<#if(hasQueryDate)
	{#>
		//查询日期赋初值
		rock.AjaxRequest(ISystemService.getServerDate, rock.exceptionFun);
		if (ISystemService.getServerDate.success) {
			(function (e) {
				serverDate = e.value;
				var date = new Date(serverDate.replace('-', '/'));
				var beginDate = date.getFullYear() + '-' + (date.getMonth() + 1) + '-1';
					<#for (int i = 0; i < beginDateLists.Count; i++)
					{#>
				toolBar.setValue(<#= beginDateLists[i] #>, beginDate);
					<#}#>
					<#for (int i = 0; i < endDateLists.Count; i++)
					{#>
				toolBar.setValue(<#= endDateLists[i] #>, serverDate);
					<#}#>
			}(ISystemService.getServerDate.resultValue));
		}
	<#}#>
	//初始化实体参照及查询项	
	<#for (var i = 0; i < queryItems.Count; i++)
    {
        queryItemModel = queryItems[i] ;	
		queryType = queryItemModel["QueryType"] as string;
		queryItemName = queryItemModel["QueryItemName"] as string;
		queryDisplayName = queryItemModel["DisplayName"] as string;
		structName = queryItemModel["StructName"] as string;
	    if(queryType == "Struct")
	    {#>
		$("#combo<#= queryItemName #>Search").append("<option value='-1'>请选择<#= queryDisplayName #></option>");			
        sqlStr = "SELECT [<#= structName #>ID],[<#= structName #>Name] FROM [<#= structName #>] order by <#= structName #>Name";
        ISystemService.execQuery.sqlString = sqlStr;
        rock.AjaxRequest(ISystemService.execQuery, rock.exceptionFun);
        if (ISystemService.execQuery.success) {
            (function (e) {
                if (e != null) {
                    var rows = e.rows;
                    var rowLength = rows.length;
                    for (var i = 0; i < rowLength; i++) {
                        var rowResult = rows[i].values;
                        $("#combo<#= queryItemName #>Search").append("<option value='" + rowResult[0].value + "'>" + rowResult[1].value + "</option>");						
                    }
                }
            }(ISystemService.execQuery.resultValue));
        }
		<#}#>	    
    <#}#>
	//初始化通用参照
	<#for (var i = 0; i < queryItems.Count; i++)
    {
        queryItemModel = queryItems[i] ;
		queryType = queryItemModel["QueryType"] as string;
		queryItemName = queryItemModel["QueryItemName"] as string;
		referType = queryItemModel["ReferType"] as string;
		queryDisplayName = queryItemModel["DisplayName"] as string;
	    if(queryType == "Refer")
	    {#>
		$("#combo<#= queryItemName #>Search").append("<option value='-1'>请选择<#= queryDisplayName #></option>");			
        sqlStr = "SELECT [ReferName] FROM [Refer] where [ReferType] = '<#= referType #>'";
        ISystemService.execQuery.sqlString = sqlStr;
        rock.AjaxRequest(ISystemService.execQuery, rock.exceptionFun);
        if (ISystemService.execQuery.success) {
            (function (e) {				
                if (e != null) {
                    var rows = e.rows;
                    var rowLength = rows.length;
                    for (var i = 0; i < rowLength; i++) {
                        var rowResult = rows[i].values;
                       $("#combo<#= queryItemName #>Search").append("<option value='" + rowResult[0].value + "'>" + rowResult[0].value + "</option>");
                    }
                }
            }(ISystemService.execQuery.resultValue));
        }
		<#}#>
    <#}#>
	<#foreach (KeyValuePair<string, string> item in structPopDict)
    {
        queryItemName = item.Key;
        structName = item.Value;#>

        sqlStr = "select [<#= structName #>ID], [<#= structName #>Name] from [<#= structName #>] where ParentID is null";
        ISystemService.execQuery.sqlString = sqlStr;
        rock.AjaxRequest(ISystemService.execQuery, rock.exceptionFun);
        if (ISystemService.execQuery.success) {
            (function (e) {
			    var rootID = 0;
                if (e != null) {
                    var rows = e.rows;
                    var rowLength = rows.length;
                    for (var i = 0; i < rowLength; i++) {
                        var rowResult = rows[i].values;
                        <#= queryItemName #>Tree.insertNewChild(0, rowResult[0].value, rowResult[1].value);
						rootID = rowResult[0].value;
                    }
                }
                <#= queryItemName #>Tree.selectItem(rootID, true, false);
            }(ISystemService.execQuery.resultValue));
        }
	<#}#>
	<#foreach (KeyValuePair<string, string> item in referPopDict)
    {
        queryItemName = item.Key;
        referType = item.Value;#>

        sqlStr = "select [ReferID], [ReferName] from [Refer] where [ParentID] is null and [ReferType] = '<#= referType #>'";
        ISystemService.execQuery.sqlString = sqlStr;
        rock.AjaxRequest(ISystemService.execQuery, rock.exceptionFun);
        if (ISystemService.execQuery.success) {
            (function (e) {
			    var rootID = 0;
                if (e != null) {
                    var rows = e.rows;
                    var rowLength = rows.length;
                    for (var i = 0; i < rowLength; i++) {
                        var rowResult = rows[i].values;
                        <#= queryItemName #>Tree.insertNewChild(0, rowResult[0].value, rowResult[1].value);
						rootID = rowResult[0].value;
                    }
                }
                <#= queryItemName #>Tree.selectItem(rootID, true, false);
            }(ISystemService.execQuery.resultValue));
        }
	<#}#>
	<#foreach (KeyValuePair<string, string> item in quickPopDict)
    {  
		queryItemName = item.Key;#>
		<#= queryItemName #>Complete("");
	<#}#>
	<#if(hasQueryDate)
	{#>
		getDataList();
	<#}else 
	{
		sql="";
		referClause ="";
		for (var i = 0; i < gridColumns.Count; i++)
		{
			 gridColumnModel = gridColumns[i] ;
			gridColumnName = gridColumnModel["GridColumnName"] as string;
			structName = gridColumnModel["StructName"] as string;
			dataType = gridColumnModel["DataType"] as string; 
			if (i < gridColumns.Count - 1)
			{
				if (!string.IsNullOrEmpty(structName))
				{
					if (structName.Trim() == "")
					{
						sql += "[" + modelType + "].[" + gridColumnName + "], ";
					}
					else
					{
						sql += "[" + structName + "].[" + structName + "Name], ";
						referClause += " join [" + structName + "] on [" + modelType + "].[" + gridColumnName + "ID] = [" + structName + "].[" + gridColumnName + "ID]";
					}
				}
				else
				{   
					if(dataType == "Date")
					{
						sql +=  "convert(nvarchar(10)," + "[" + modelType + "].[" + gridColumnName + "],120) as " + gridColumnName + ", ";
					}
					else if(dataType == "Bool")
					{
						sql += "CASE [" + modelType + "].[" + gridColumnName + "] WHEN '1' THEN '是' WHEN '0' THEN '否' END, "; 
					}
					else
					{
						sql += "[" + modelType + "].[" + gridColumnName + "], ";
					}
				}
			}
			else
			{
            if (!string.IsNullOrEmpty(structName))
            {
                if (structName.Trim() == "")
                {
                    sql += "[" + modelType + "].[" + gridColumnName + "] from [" + modelType + "]";
                }
                else
                {
                    sql += "[" + structName + "].[" + structName + "Name] from [" + modelType + "]";
                    referClause += " join [" + structName + "] on [" + modelType + "].[" + gridColumnName + "ID] = [" + structName + "].[" + gridColumnName + "ID] ";
                }
            }
            else
            {                  
				if(dataType == "Date")
				{
					sql +=  "convert(nvarchar(10)," + "[" + modelType + "].[" + gridColumnName + "],120) as" + gridColumnName + " from [" + modelType + "]";
				}
				else if(dataType == "Bool")
				{
					sql += "CASE [" + modelType + "].[" + gridColumnName + "] WHEN '1' THEN '是' WHEN '0' THEN '否' END from [" + modelType + "]";
				}
				else
				{
					sql += "[" + modelType + "].[" + gridColumnName + "] from [" + modelType + "]";
				}
            }
			if(referClause == "")
			{
			    sql += " where 1=1 ";
			}
			else
			{
			    sql += referClause ;
			}           
		}
			
	} #>	
		sqlStr = "select top 50 [<#= modelType #>].[<#= modelType #>ID], <#= sql #> ";
		ISystemService.execQuery.sqlString = sqlStr;
		rock.AjaxRequest(ISystemService.execQuery, rock.exceptionFun);
		if (ISystemService.execQuery.success) {
			(function (e) {
		        rock.tableToListGrid(e, listGrid, dictDataList);
            }(ISystemService.execQuery.resultValue));		
        }  
	<#}#>
    });
	//初始化工具条同时处理查询条件
	toolBar = new dhtmlXToolbarObject("toolBar", 'dhx_skyblue');
	toolBar.setIconsPath("/resource/dhtmlx/codebase/imgs");
	<#for (var i = 0; i < queryItems.Count; i++)
    {
        queryItemModel = queryItems[i] ;
		queryItemName = queryItemModel["QueryItemName"] as string;
		displayName = queryItemModel["DisplayName"] as string;
		queryForm = queryItemModel["QueryForm"] as string;
		switch (queryForm)
		{
			case "Date": 
		        dateControlLists.Add("toolBar.getInput(\"begin" + queryItemName + "\")");
			    dateControlLists.Add("toolBar.getInput(\"end" + queryItemName + "\")");
		        beginDateLists.Add("\"begin" + queryItemName + "\"");
			    endDateLists.Add("\"end" + queryItemName + "\"");			
			    hasQueryDate = true;
		        hasQueryDate = true;#>
	toolBar.addText("<#= queryItemName#>Begin", null, "<#= displayName #>");
    toolBar.addInput("begin<#= queryItemName#>", null, "", 75);
    toolBar.addText("<#= displayName #>End", null, "-");
    toolBar.addInput("end<#= queryItemName#>", null, "", 75);
			<# break;
			case "Fuzzy":#>
	toolBar.addText("<#= queryItemName #>", null, "<#= displayName #>");
	toolBar.addInput("txt<#= queryItemName #>Search", null, "", 100);
			<# break;
			case "Value": #>
	toolBar.addText("<#= queryItemName #>", null, "<#= displayName #>");
	toolBar.addInput("txt<#= queryItemName #>Search", null, "", 100);
			<# break;
			case "Combox": #>
	toolBar.addInput("txt<#= queryItemName #>Search", null);
			<# break;
			case "Tree": #>
	toolBar.addText("<#= queryItemName #>", null, "<#= displayName #>");
	toolBar.addInput("txt<#= queryItemName #>Search", null, "", 100);
			<# break;
			case "Quick": #>
	toolBar.addText("<#= queryItemName #>", null, "<#= displayName #>");
	toolBar.addInput("txt<#= queryItemName #>Search", null, "", 100);
			<# break;
        }#>	   
    <#}#>
    toolBar.addButton("query", null, "查询");
	toolBar.attachEvent("onClick", function (id) {
	    getDataList();
    });

	<#for (var i = 0; i < queryItems.Count; i++)
    {
        queryItemModel = queryItems[i] ;
		queryItemName = queryItemModel["QueryItemName"] as string;
		displayName = queryItemModel["DisplayName"] as string;
		queryForm = queryItemModel["QueryForm"] as string;
		if(queryForm == "Combox"){#>
	toolBar.getInput("txt<#= queryItemName #>Search").id = "txt<#= queryItemName #>Search";
    $("#txt<#= queryItemName #>Search").css("display", "none");
    $("#txt<#= queryItemName #>Search").after("<select id='combo<#= queryItemName #>Search' style=\"width:100px\"></select>");
		<#}#>
    <#}#>

	<#for (var i = 0; i < queryItems.Count; i++)
    {
        queryItemModel = queryItems[i] ;
		queryItemName = queryItemModel["QueryItemName"] as string;
		displayName = queryItemModel["DisplayName"] as string;
		queryForm = queryItemModel["QueryForm"] as string;
		if(queryForm == "Tree" || queryForm == "Quick"){#>
    toolBar.getInput("txt<#= queryItemName #>Search").id = "txt<#= queryItemName #>Search";
		<#}#>
    <#}#>

    //初始化<#= modelTypeName #>列表
    listGrid = new dhtmlXGridObject("listGrid");
    listGrid.setImagePath("/resource/dhtmlx/codebase/imgs/");
    listGrid.setSkin("dhx_skyblue");
	<# var headerString = "序号,,"; 
		var columnAlignString = "center,left,";
		var columnWidthString = "40,0,";
		var columnSortString = "na,na,";
		var columnTypeString = "cntr,ro,";	
		for (var i = 0; i < gridColumns.Count; i++) {
			gridColumnModel = gridColumns[i];
			if (i < gridColumns.Count - 1) {
				headerString += gridColumnModel["GridHeader"] + ",";
				columnAlignString += gridColumnModel["GridColAlign"] + ",";
				columnWidthString += gridColumnModel["GridWidth"] + ",";
				columnSortString += gridColumnModel["GridColSorting"] + ",";
				columnTypeString += gridColumnModel["GridColType"] + ",";
			}
			else
			{
				headerString += gridColumnModel["GridHeader"];
				columnAlignString += gridColumnModel["GridColAlign"];
				if(columnTotalWidth > 1000)
				{
				    columnWidthString += gridColumnModel["GridWidth"];
				}
				else
				{
					columnWidthString += "*";
				}
				columnSortString += gridColumnModel["GridColSorting"];
				columnTypeString += gridColumnModel["GridColType"];
			}		
		}	
    #>

	listGrid.setHeader("<#= headerString #>");
	listGrid.setInitWidths("<#= columnWidthString #>");
	listGrid.setColAlign("<#= columnAlignString #>");
	listGrid.setColSorting("<#= columnSortString #>");
	listGrid.setColTypes("<#= columnTypeString #>");
    listGrid.enableDistributedParsing(true, 20);
    listGrid.attachEvent("onRowDblClicked", function (rowID, cIndex) {	   
		alert("尚未设定查看明细弹窗!");
    });   
    listGrid.init();  

	//加载弹窗Div
    <# if(hasQueryPop)
    {
	     for (int i = 0; i < popDivLists.Count; i++)
         {
		     popStr = popDivLists[i];
		 #>
    $(document.body).append('<#= popStr #>');  
         <#}		
     }#> 
   
	<#foreach (KeyValuePair<string, string> item in structPopDict)
	{
		queryItemName = item.Key;
		structName = item.Value;#>
	<#= queryItemName #>Tree = new dhtmlXTreeObject("<#= queryItemName #>Tree", "100%", "100%", 0);
	<#= queryItemName #>Tree.setImagePath("/resource/dhtmlx/codebase/imgs/csh_bluefolders/");
	<#= queryItemName #>Tree.setStdImages("icon_leaf.png", "folderOpen.gif", "folderClosed.gif");
	<#= queryItemName #>Tree.attachEvent("onSelect", <#= queryItemName #>TreeSelect);
	<#= queryItemName #>Tree.attachEvent("onDblClick", function (id) {
		$("#txt<#= queryItemName #>ID").val(id);
		$("#txt<#= queryItemName #>").val(<#= queryItemName #>Tree.getSelectedItemText());
		$("#txt<#= queryItemName #>Search").val(<#= queryItemName #>Tree.getSelectedItemText());    
		hide<#= queryItemName #>Pop()
	});

	function <#= queryItemName #>TreeSelect(itemid) {
		if (!<#= queryItemName #>Tree.hasChildren(itemid)) {
			ISystemService.execQuery.sqlString = "select [<#= structName #>ID],[<#= structName #>Name] from [<#= structName #>] where ParentID = " + itemid;
			rock.AjaxRequest(ISystemService.execQuery, rock.exceptionFun);
			if (ISystemService.execQuery.success) {
				(function (e) {
					var rows = e.rows;
					for (var i = 0; i < rows.length; i++) {
						var rowResult = rows[i].values;
						<#= queryItemName #>Tree.insertNewChild(itemid, rowResult[0].value, rowResult[1].value);
					}
				}(ISystemService.execQuery.resultValue));
			}
		}
	}

	<#= queryItemName #>Pop = $("#<#= queryItemName #>Pop")	
	$('#txt<#= queryItemName #>').focus(function (e) {
		show<#= queryItemName #>Pop();
	});
		<#for (var i = 0; i < queryItems.Count; i++)
		{
			queryItemModel = queryItems[i] ;
			queryItemName = queryItemModel["QueryItemName"] as string;
			queryForm = queryItemModel["QueryForm"] as string;
			if(queryForm == "Tree" && queryItemName == queryItemName){#>
	$('#txt<#= queryItemName #>Search').focus(function (e) {
		show<#= queryItemName #>SearchPop();
	});
	function show<#= queryItemName #>SearchPop() {
		var top = $("#txt<#= queryItemName #>Search").offset().top;
		var left = $("#txt<#= queryItemName #>Search").offset().left;
		<#= queryItemName #>Pop.css({ top: top + 22, left: left }).show();    
	}
			<#}#>
		<#}#>	

	function show<#= queryItemName #>Pop() {
		var top = $("#txt<#= queryItemName #>").offset().top;
		var left = $("#txt<#= queryItemName #>").offset().left;
		<#= queryItemName #>Pop.css({ top: top + 22, left: left }).show();
	}

	function hide<#= queryItemName #>Pop() {
		<#= queryItemName #>Pop.css({ top: 200, left: -1300 }).hide();
	}

	hide<#= queryItemName #>Pop();
	<#}#>    

	<#foreach (KeyValuePair<string, string> item in referPopDict)
	{
		queryItemName = item.Key;
		referType = item.Value;#>
    <#= queryItemName #>Tree = new dhtmlXTreeObject("<#= queryItemName #>Tree", "100%", "100%", 0);
    <#= queryItemName #>Tree.setImagePath("/resource/dhtmlx/codebase/imgs/csh_bluefolders/");
    <#= queryItemName #>Tree.setStdImages("icon_leaf.png", "folderOpen.gif", "folderClosed.gif");
    <#= queryItemName #>Tree.attachEvent("onSelect", <#= queryItemName #>TreeSelect);
    <#= queryItemName #>Tree.attachEvent("onDblClick", function (id) {
        $("#txt<#= queryItemName #>").val(<#= queryItemName #>Tree.getSelectedItemText());
		$("#txt<#= queryItemName #>Search").val(<#= queryItemName #>Tree.getSelectedItemText());    
        hide<#= queryItemName #>Pop()
    });

    function <#= queryItemName #>TreeSelect(itemid) {
        if (!<#= queryItemName #>Tree.hasChildren(itemid)) {
            ISystemService.execQuery.sqlString = "select [ReferID],[ReferName] from [Refer] where [ReferType] = '<#= referType #>' and [ParentID] = " + itemid;
            rock.AjaxRequest(ISystemService.execQuery, rock.exceptionFun);
            if (ISystemService.execQuery.success) {
                (function (e) {
                    var rows = e.rows;
                    for (var i = 0; i < rows.length; i++) {
                        var rowResult = rows[i].values;
                        <#= queryItemName #>Tree.insertNewChild(itemid, rowResult[0].value, rowResult[1].value);
                    }
                }(ISystemService.execQuery.resultValue));
            }
        }
    }

	<#= queryItemName #>Pop = $("#<#= queryItemName #>Pop")	
    $('#txt<#= queryItemName #>').focus(function (e) {
        show<#= queryItemName #>Pop();
    });

	 $('#txt<#= queryItemName #>Search').focus(function (e) {
        show<#= queryItemName #>SearchPop();
    });
    function show<#= queryItemName #>SearchPop() {
        var top = $("#txt<#= queryItemName #>Search").offset().top;
        var left = $("#txt<#= queryItemName #>Search").offset().left;
        <#= queryItemName #>Pop.css({ top: top + 22, left: left }).show();    
	}
	
	function show<#= queryItemName #>Pop() {
        var top = $("#txt<#= queryItemName #>").offset().top;
        var left = $("#txt<#= queryItemName #>").offset().left;
        <#= queryItemName #>Pop.css({ top: top + 22, left: left }).show();
    }

    function hide<#= queryItemName #>Pop() {
        <#= queryItemName #>Pop.css({ top: 200, left: -1300 }).hide();
    }
	hide<#= queryItemName #>Pop();
	<#}#>

	<#foreach (KeyValuePair<string, string> item in quickPopDict)
	{   
		queryItemName = item.Key;
		structName = item.Value;#>
	var  <#= queryItemName #>DataList = new rock.JsonList();
    <#= queryItemName #>QuickGrid = new dhtmlXGridObject("<#= queryItemName #>QuickGrid");
    <#= queryItemName #>QuickGrid.setImagePath("/resource/dhtmlx/codebase/imgs/");
    <#= queryItemName #>QuickGrid.setSkin("dhx_skyblue");
	<#= queryItemName #>QuickGrid.setHeader(",,");
	<#= queryItemName #>QuickGrid.setInitWidths("0,0,*");
	<#= queryItemName #>QuickGrid.setColAlign("center,center,left");
	<#= queryItemName #>QuickGrid.setColSorting("na,na,str");
	<#= queryItemName #>QuickGrid.setColTypes("ro,ro,ro");
    <#= queryItemName #>QuickGrid.enableDistributedParsing(true, 20);
    <#= queryItemName #>QuickGrid.attachEvent("onRowDblClicked", function (rowID, cIndex) {			
		$("#txt<#= queryItemName #>Search").val(<#= queryItemName #>QuickGrid.cells(rowID, 2).getValue());
		hide<#= queryItemName #>Pop();
    });   
    <#= queryItemName #>QuickGrid.init(); 
	<#= queryItemName #>QuickGrid.detachHeader(0); 
	<#= queryItemName #>Pop = $("#<#= queryItemName #>Pop")	
	$('#txt<#= queryItemName #>Search').focus(function (e) {
		show<#= queryItemName #>Pop($("#txt<#= queryItemName #>Search").offset().top, $("#txt<#= queryItemName #>Search").offset().left);
    });				

	function show<#= queryItemName #>Pop(top, left) {
        <#= queryItemName #>Pop.css({ top: top + 22, left: left }).show();
		//判断记录条数如果少于10条就重新加载
        if (<#= queryItemName #>DataList.rows.length < 10) {
            <#= queryItemName #>Complete("");
        }
    }

    function hide<#= queryItemName #>Pop() {
        <#= queryItemName #>Pop.css({ top: 200, left: -1300 }).hide();
    }
	hide<#= queryItemName #>Pop();

	$("#txt<#= queryItemName #>Search").keyup(function () {
		<#= queryItemName #>Complete($("#txt<#= queryItemName #>Search").val());        
    });

	function <#= queryItemName #>Complete(searchCode) {
        ISystemService.execQuery.sqlString = "select top 14 [<#= structName #>].[<#= structName #>ID], [<#= structName #>].[<#= structName #>Name] from [<#= structName #>] where [<#= structName #>Name] like  '%" + searchCode + "%' or [SearchCode] like  '%" + searchCode + "%'";
        rock.AjaxRequest(ISystemService.execQuery, rock.exceptionFun);
        if (ISystemService.execQuery.success) {
            (function (e) {
                rock.tableToListGrid(e, <#= queryItemName #>QuickGrid, <#= queryItemName #>DataList);
            }(ISystemService.execQuery.resultValue));
        }
    }
	<#}#>

    <# if(hasQueryPop)
    { #>
    $('#mainPage').mousedown(function (e) {
		<#for (var i = 0; i < queryItems.Count; i++)
		{
		    queryItemModel = queryItems[i] ;
			queryItemName = queryItemModel["QueryItemName"] as string;
			queryForm = queryItemModel["QueryForm"] as string;
			if(queryForm == "Tree"){#>
        if (e.srcElement.id != "txt<#= queryItemName #>Search") {
            hide<#= queryItemName #>Pop();
        }
		    <#}#>   
		<#}#> 
		<#for (var i = 0; i < popQueryItemNameLists.Count; i++)
		{
		    queryItemName = popQueryItemNameLists[i];#>
			if (e.srcElement.id != "txt<#= queryItemName #>Search") {
				hide<#= queryItemName #>Pop();
			}
		<#}#>           
    }); 	
    <#}#>
	<# sql=""; 
	referClause ="";
	for (var i = 0; i < gridColumns.Count; i++)
    {
        gridColumnModel = gridColumns[i] ;
		gridColumnName = gridColumnModel["GridColumnName"] as string;
		structName = gridColumnModel["StructName"] as string;
		dataType = gridColumnModel["DataType"] as string; 
        if (i < gridColumns.Count - 1)
        {
            if (!string.IsNullOrEmpty(structName))
            {
                if (structName.Trim() == "")
                {
                    sql += "[" + modelType + "].[" + gridColumnName + "], ";
                }
                else
                {
                    sql += "[" + structName + "].[" + structName + "Name], ";
                    referClause += " join [" + structName + "] on [" + modelType + "].[" + gridColumnName + "ID] = [" + structName + "].[" + gridColumnName + "ID]";
                }
            }
            else
            {   
				if(dataType == "Date")
				{
					sql +=  "convert(nvarchar(10)," + "[" + modelType + "].[" + gridColumnName + "],120) as " + gridColumnName + ", ";
				}
				else if(dataType == "Bool")
				{
					sql += "CASE [" + modelType + "].[" + gridColumnName + "] WHEN '1' THEN '是' WHEN '0' THEN '否' END, "; 
				}
				else
				{
					sql += "[" + modelType + "].[" + gridColumnName + "], ";
				}
            }
        }
        else
        {
            if (!string.IsNullOrEmpty(structName))
            {
                if (structName.Trim() == "")
                {
                    sql += "[" + modelType + "].[" + gridColumnName + "] from [" + modelType + "]";
                }
                else
                {
                    sql += "[" + structName + "].[" + structName + "Name] from [" + modelType + "]";
                    referClause += " join [" + structName + "] on [" + modelType + "].[" + gridColumnName + "ID] = [" + structName + "].[" + gridColumnName + "ID] ";
                }
            }
            else
            {                  
				if(dataType == "Date")
				{
					sql +=  "convert(nvarchar(10)," + "[" + modelType + "].[" + gridColumnName + "],120) as" + gridColumnName + " from [" + modelType + "]";
				}
				else if(dataType == "Bool")
				{
					sql += "CASE [" + modelType + "].[" + gridColumnName + "] WHEN '1' THEN '是' WHEN '0' THEN '否' END from [" + modelType + "]";
				}
				else
				{
					sql += "[" + modelType + "].[" + gridColumnName + "] from [" + modelType + "]";
				}
            }
			if(referClause == "")
			{
			    sql += " where 1=1 ";
			}
			else
			{
			    sql += referClause ;
			}            
        }
    }#>
	function getDataList() {
		<#for (var i = 0; i < queryItems.Count; i++)
        {
            queryItemModel = queryItems[i] ;
			queryItemName = queryItemModel["QueryItemName"] as string;
			displayName = queryItemModel["DisplayName"] as string;
			queryForm = queryItemModel["QueryForm"] as string;
	        if(queryForm == "Date")
	        {#>
        if ($.trim(toolBar.getValue("begin<#= queryItemName #>")) == "") {
            alert("起始<#= displayName #>不能为空！");
            return;
        }			    
        if (!rock.chkdate(toolBar.getValue("begin<#= queryItemName #>"), "-")) {
            alert("起始<#= displayName #>格式不正确,正确格式为 2010-10-10！");
            return false;
        }
        if ($.trim(toolBar.getValue("end<#= queryItemName #>")) == "") {
            alert("截止<#= displayName #>不能为空！");
            return;
        }
        if (!rock.chkdate(toolBar.getValue("end<#= queryItemName #>"), "-")) {
            alert("截止<#= displayName #>格式不正确,正确格式为 2010-10-10！");
            return false;
        }
			<#}#>
        <#}#>
		sqlStr = "select [<#= modelType #>].[<#= modelType #>ID], <#= sql #> ";      
		<#for (var i = 0; i < queryItems.Count; i++)
        {
            queryItemModel = queryItems[i] ;
			queryItemName = queryItemModel["QueryItemName"] as string;
			queryType = queryItemModel["QueryType"] as string;
			structName = queryItemModel["StructName"] as string;
			displayName = queryItemModel["DisplayName"] as string;
			queryForm = queryItemModel["QueryForm"] as string;
				switch (queryForm)
				{
					case "Date":#>
			sqlStr += " and [<#= modelType #>].[<#= queryItemName #>] between '" + toolBar.getValue("begin<#= queryItemName #>") + " 0:0:0' AND '" + toolBar.getValue("end<#= queryItemName #>") + " 23:59:59' ";
					<# break;
					case "Fuzzy":
						if(queryType == "Struct"){#>
            if (toolBar.getValue("txt<#= queryItemName #>Search") != "") {
				sqlStr += " and [<#= structName #>].[<#= structName #>Name] like '%" + toolBar.getValue("txt<#= queryItemName #>Search") + "%'";
            }
				        <#}else{#>
            if (toolBar.getValue("txt<#= queryItemName #>Search") != "") {
				sqlStr += " and [<#= modelType #>].[<#= queryItemName #>] like '%" + toolBar.getValue("txt<#= queryItemName #>Search") + "%'";
            }
						<#}#>
					<# break;
					case "Value": #>							
            if (toolBar.getValue("txt<#= queryItemName #>Search") != "") {
				sqlStr += " and [<#= modelType #>].[<#= queryItemName #>] = '" + toolBar.getValue("txt<#= queryItemName #>Search") + "'";
            }							
					<# break;
					case "Tree":							
						if(queryType == "Struct"){#>
            if (toolBar.getValue("txt<#= queryItemName #>Search") != "") {
				sqlStr += " and [<#= modelType #>].[<#= queryItemName #>ID] = " + $("#txt<#= queryItemName #>ID").val() ;
            }
				        <#}else{#>
            if (toolBar.getValue("txt<#= queryItemName #>Search") != "") {
				sqlStr += " and [<#= modelType #>].[<#= queryItemName #>] = '" + $("#txt<#= queryItemName #>Search").val() + "'";
            }
				        <#}#>							
					<# break;
					case "Combox":							
						if(queryType == "Struct"){#>
			if ($("#combo<#= queryItemName #>Search").val() != "-1") {
				sqlStr += " and [<#= structName #>].[<#= structName #>ID] = " + $("#combo<#= queryItemName #>Search").val();
			}           
				        <#}else{#>
            if ($("#combo<#= queryItemName #>Search").val() != "-1") {
				sqlStr += " and [<#= modelType #>].[<#= queryItemName #>] = '" + $("#combo<#= queryItemName #>Search").val() + "'";
            }
						<#}#>
					<# break;
					case "Quick":#>							
            if (toolBar.getValue("txt<#= queryItemName #>Search") != "") {
				sqlStr += " and [<#= structName #>].[<#= structName #>Name] like '%" + toolBar.getValue("txt<#= queryItemName #>Search") + "%'";
            }							
					<# break;
				}#>	
        <#}#>
        ISystemService.execQuery.sqlString = sqlStr;
        rock.AjaxRequest(ISystemService.execQuery, rock.exceptionFun);
        if (ISystemService.execQuery.success) {
            (function (e) {
                rock.tableToListGrid(e, listGrid, dictDataList)
            }(ISystemService.execQuery.resultValue));
        }
    }

    <#if(hasQueryDate)
    {#>	
	//日期控件处理 
	var dateboxArray = [];
        <#for (int i = 0; i < dateControlLists.Count; i++)
        {#>
    dateboxArray.push(<#= dateControlLists[i] #>);            
        <#}#>
	myCalendar = new dhtmlXCalendarObject(dateboxArray);
    myCalendar.loadUserLanguage('cn');
    <#}#>
})